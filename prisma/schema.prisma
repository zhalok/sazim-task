// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Seller      Seller?      @relation(fields: [uploaderId], references: [id])
  uploaderId  String?
  OrderItems  OrderItems[]
  categories  String[]     @default([])
}

model User {
  id        String   @id @default(uuid()) // Unique ID
  name      String
  email     String   @unique // Unique email
  password  String
  role      Role     @default(USER) // Role-based access
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Seller    Seller?
}

model Seller {
  id        String        @id @default(uuid()) // Unique ID
  userId    String        @unique
  user      User          @relation(fields: [userId], references: [id])
  companyId String
  company   SellerCompany @relation(fields: [companyId], references: [id])
  rating    Float         @default(0.0) // Seller rating
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Product   Product[]
}

model Customer {
  id      String @id @default(uuid())
  name    String
  phone   String
  email   String @unique
  address String
}

model SellerCompany {
  id     String   @id @default(uuid())
  name   String   @unique
  Seller Seller[]
}

model OrderItems {
  id        String  @id @default(uuid())
  productId String
  quantity  Int
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id                 String       @id @default(uuid())
  customerEmail      String
  customerPhone      String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  orderItems         OrderItems[]
  status             OrderStatus
  totalAmount        Int
  customerId         String?
  cancellationReason String?
  type               OrderType    @default(PURCHASE)
  expireAt           DateTime     @default(dbgenerated("(now() + interval '5 minutes')"))
  rentPeriod         Int?         @default(0)
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  status    PaymentStatus
  orderId   String
  expiredAt DateTime      @default(dbgenerated("(now() + interval '2 minutes')"))
  createdAt DateTime      @default(now())
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PLACED
  COMPLETED
  CANCELLED
  ON_RENT
  EXPIRED
}

enum OrderType {
  PURCHASE
  RENT
}

enum PaymentStatus {
  PENDING
  SUCCESSFULL
  FAILED
}
